@Library('jenkins-pipeline-shared-libraries')_

helper = null
testsFailed = false

pipeline {
    agent {
        label 'kogito-operator-node && !master'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
        maven 'kie-maven-3.8.1'
        go 'golang-1.16'
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.ci/jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.cleanGoPath()

                    helper.updateDisplayName()
                    helper.checkoutRepo()

                    // Openshift login is needed for the examples generation
                    openshift.loginOpenshift()

                    helper.loginRegistry()
                }
            }
            post {
                success {
                    script {
                        properties.add('git.branch', helper.getBuildBranch())
                        properties.add('git.author', helper.getGitAuthor())
                    }
                }
            }
        }

        stage('Build examples images') {
            when {
                expression { return !params.SKIP_NON_NATIVE_TESTS }
            }
            steps {
                script {
                    try {
                        // Use docker because of https://issues.redhat.com/browse/KOGITO-3512
                        sh "make build-examples-images concurrent=3 smoke=${params.SMOKE_TESTS_ONLY} ${getExamplesBuildParameters()}"
                    } catch (err) {
                        testsFailed = true
                        util.archiveConsoleLog()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/examples/logs/**/*.log', allowEmptyArchive: false
                    junit testResults: 'test/examples/logs/**/junit.xml', allowEmptyResults: false
                }
            }
        }

        stage('Handle built images') {
            steps {
                script {
                    // Retrieve the list of images
                    images = readFile(file: 'test/examples/logs/built_project_image_names.log').split('\n')

                    for (String imageName : images) {
                        if (helper.isDeployLatestTag()) {
                            String finalFullImage = helper.getImageFullTag(imageName, defaultImageParamsPrefix, 'latest')
                            container.tagImage(helper.getImageFullTag(imageName), finalFullImage)
                            container.pushImage(finalFullImage)
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Verify here if BDD tests due to test errors or build error
                if (testsFailed && currentBuild.currentResult == 'SUCCESS') {
                    error 'There was a test execution failure'
                }
            }
        }
        cleanup {
            script {
                helper.cleanGoPath()
                util.cleanNode(containerEngine)
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////
// BDD parameters
////////////////////////////////////////////////////////////////////////

String getExamplesBuildParameters() {
    Map testParamsMap = helper.getBDDCommonParameters(true)

    testParamsMap['image_cache_mode'] = 'never'
    testParamsMap.putAll(helper.getBDDRuntimeImageParameters())

    // May be used by the features ...
    testParamsMap.putAll(helper.getBDDBuildImageParameters('KOGITO_IMAGES'))
    testParamsMap.putAll(helper.getBDDServicesImageParameters('KOGITO_IMAGES'))

    def tags = helper.isNative() ? [ helper.getNativeTag() ] : [ helper.getNonNativeTag() ]
    if (params.BDD_TEST_TAGS) {
        tags.add(params.BDD_TEST_TAGS)
    }
    testParamsMap['tags'] = tags.join('&&')

    if (helper.isNative() && helper.getNativeBuilderImage()) {
        testParamsMap['tags'] = tags.join('&&')
    }

    String testParams = testParamsMap.findAll { entry -> entry.getValue() }
                            .collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "Example Build parameters = ${testParams}"
    return testParams
}